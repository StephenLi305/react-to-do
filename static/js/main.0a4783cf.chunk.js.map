{"version":3,"sources":["StopWatch.js","App.js","serviceWorker.js","index.js"],"names":["StopWatch","_useState","useState","_useState2","Object","slicedToArray","second","setSecond","_useState3","_useState4","minute","setMintue","_useState5","_useState6","hour","setHour","_useState7","_useState8","started","setStarted","_useState9","_useState10","intervalId","setIntervalId","useEffect","console","log","formatedHour","formatedMinute","formatedSecond","react_default","a","createElement","className","onClick","clearInterval","setInterval","List","_ref","list","index","updateList","deleteList","completeTodo","todoIndex","newTodos","toConsumableArray","isCompleted","removeTodo","splice","key","map","todo","App_Todo","App_TodoForm","addTodo","text","concat","Todo","_ref2","style","textDecoration","TodoForm","_ref3","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","lists","setList","newLists","App_List","push","addList","src_StopWatch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a4783cf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst StopWatch = () => {\n    const [second, setSecond] = useState(0);\n    const [minute, setMintue] = useState(0);\n    const [hour, setHour] = useState(0);\n    const [started, setStarted] = useState(false);\n    const [intervalId, setIntervalId] = useState(null);\n\n    const startTime = () => {\n        if (started) {\n            clearInterval(intervalId);\n            setStarted(false);\n            setIntervalId(null);\n        } else {\n            setStarted(true);\n            setIntervalId(() => setInterval(\n                // need to pass in second as an argument to the setSecond function to update it \n                () => setSecond(second => second + 1)\n                , 1000))\n        }\n    }\n    const resetTime = () => {\n        if (started) {\n            clearInterval(intervalId);\n            setIntervalId(null);\n            setStarted(false);\n        } \n        setSecond(0);\n        setMintue(0);\n        setHour(0);\n    }\n\n    useEffect(() => {\n        // Same as ComponentDid Update\n        console.log(second);\n        if (second > 59) {\n            setSecond(0);\n            setMintue(minute + 1);\n        }\n\n        if (minute > 59) {\n            setMintue(0);\n            setHour(hour + 1);\n        }\n    }, [second, minute, hour])\n\n\n\n    const formatedHour = hour < 10 ? \"0\" + hour : hour\n    const formatedMinute = minute < 10 ? \"0\" + minute : minute\n    const formatedSecond = second < 10 ? \"0\" + second : second\n\n    return (\n        <div className=\"box\">\n            <h3>Stopwatch</h3>\n            <p>Hours:{formatedHour}</p>\n            <p>Minutes:{formatedMinute}</p>\n            <p>Seconds:{formatedSecond}</p>\n            <button onClick={startTime}>{started ? \"Stop Time\" : \"Start Time\"}</button>\n            <button onClick={resetTime}>Reset Time</button>\n        </div>\n    )\n}\n\n\nexport default StopWatch;\n","import React, {useState} from 'react';\nimport './App.css';\nimport StopWatch from './StopWatch'\n\nconst App = () => {\n  const [lists, setList] = useState([\n      [\n        {\n          text: \"Learn ReactHooks\",\n          isCompleted: false\n        },\n        {\n          text: \"Go get boba\",\n          isCompleted: false\n        },\n        {\n          text: \"Play basketball\",\n          isCompleted: false\n        }\n      ]\n  ])\n\n  const updateList = (list, index) => {\n    const newLists = [...lists];\n    newLists[index] = list;\n    setList(newLists);\n  }\n  \n  const addList = () => {\n    const newLists = [...lists];\n    const newList = [];\n    newLists.push(newList);\n    setList(newLists);\n  }\n  \n  const deleteList = (index) => {\n    const newLists = [...lists];\n    newLists.splice(index, 1);\n    setList(newLists);\n  }\n\n  return(\n    <div className=\"app\">\n      <div className=\"app-items\"> \n        {lists.map((list, index) => (\n          <div key={index}>\n            <List\n              list={list}\n              key={index}\n              index={index}\n              updateList={updateList}\n              deleteList={deleteList}\n            />\n          </div>\n        ))}\n        <button className=\"box\" onClick={() => addList()}>Add a new list!</button>\n      </div>\n      <div className=\"app-items\">\n        <StopWatch/>\n      </div>\n    </div>\n  )\n\n}\n\n\n\nconst List = ({list, index, updateList, deleteList}) => {\n  // want to use the same list from the props\n  // giving it a new variable meant I was modifying a new one, which mean I was still modifitying the state, but the render was rendinging just the number of list, and not the exact values. \n\n  const addTodo = text => {\n    const newTodos = [...list, { text }];\n    updateList(newTodos, index)\n  }\n  \n  const completeTodo = todoIndex => {\n    const newTodos = [...list];\n    newTodos[todoIndex].isCompleted = !newTodos[todoIndex].isCompleted;\n    updateList(newTodos, index)\n  }\n  \n  const removeTodo = todoIndex => {\n    const newTodos = [...list];\n    newTodos.splice(todoIndex, 1);\n    updateList(newTodos, index)\n  }\n  return (\n      <div className=\"box\" key={index}>\n        <h3>\n        <div>List {index + 1}</div>\n        <button onClick={() => deleteList(index)}>X</button>\n        </h3>\n        {list.map((todo, index) => (\n          <Todo \n            key={index} \n            todo={todo} \n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n            index={index}/>\n        ))}\n        <TodoForm addTodo={addTodo}/>\n      </div>\n  )\n}\n\n\n\n\n\nconst Todo = ({todo, index, completeTodo, removeTodo}) => {\n  return(\n    <div \n      className=\"todo\"\n      style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button>\n        <button onClick={() => removeTodo(index)}>X</button>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst TodoForm = ({addTodo}) => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(!value) return;\n    addTodo(value);\n    setValue('');\n  };\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        className=\"input\"\n        value={value}\n        placeholder=\"Add new to do...\"\n        onChange={e => setValue(e.target.value)}/>\n        <button>Add!</button>\n    </form>\n  )\n}\n\nexport default App\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}