{"ast":null,"code":"// import React, {useState} from 'react';\n// import './App.css';\n// const App = () => {\n//   const [lists, setList] = useState([\n//       [\n//         {\n//           text: \"Learn ReactHooks\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"Go get boba\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"play basketball\",\n//           isCompleted: false\n//         }\n//       ]\n//   ])\n//   const updateList = (list, index) => {\n//     const newLists = [...lists];\n//     newLists[index] = list;\n//     setList(newLists);\n//     // console.log(list)\n//     // console.log(newLists)\n//   }\n//   const addList = () => {\n//     const newLists = [...lists];\n//     const newList = [];\n//     newLists.push(newList);\n//     // newLists.unshift(newList);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n//   const deleteList = (index) => {\n//     const newLists = [...lists];\n//     newLists.splice(index, 1);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n//   return(\n//     <div className=\"app\">\n//       {lists.map((list, index) => (\n//         <div key ={index}>\n//           <List \n//           list={list} \n//           key={index}\n//           index={index}\n//           updateList={updateList}\n//           deleteList={deleteList}\n//           />\n//         </div>\n//       ))}\n//       <button className=\"todo-list\" onClick={() => addList()}>Add a New List!</button>\n//     </div>\n//   )\n// }\n// const List = ({list, index, updateList, deleteList}) => {\n//   // want to use the same list from the props\n//   // giving it a new variable meant I was modifying a new one, which mean I was still modifitying the state, but the render was rendinging just the number of list, and not the exact values. \n//   // const [ , setTodos] = useState(\n//   // )\n//   const addTodo = text => {\n//     const newTodos = [...list, { text }];\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   const completeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos[todoIndex].isCompleted = !newTodos[todoIndex].isCompleted;\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   const removeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos.splice(todoIndex, 1);\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   return (\n//       <div className=\"todo-list\" key={index}>\n//         <h3>\n//         <div>List {index + 1}</div>\n//         <button onClick={() => deleteList(index)}>X</button>\n//         </h3>\n//         {list.map((todo, index) => (\n//           <Todo \n//             key={index} \n//             todo={todo} \n//             completeTodo={completeTodo}\n//             removeTodo={removeTodo}\n//             index={index}/>\n//         ))}\n//         <TodoForm addTodo={addTodo}/>\n//       </div>\n//   )\n// }\n// const Todo = ({todo, index, completeTodo, removeTodo}) => {\n//   return(\n//     <div \n//       className=\"todo\"\n//       style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n//     >\n//       {todo.text}\n//       <div>\n//         <button onClick={() => completeTodo(index)}>Complete</button>\n//         <button onClick={() => removeTodo(index)}>X</button>\n//       </div>\n//     </div>\n//   )\n// }\n// const TodoForm = ({addTodo}) => {\n//   const [value, setValue] = useState('');\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if(!value) return;\n//     addTodo(value);\n//     setValue('');\n//   };\n//   return(\n//     <form onSubmit={handleSubmit}>\n//       <input \n//         type=\"text\"\n//         className=\"input\"\n//         value={value}\n//         placeholder=\"Add new to do...\"\n//         onChange={e => setValue(e.target.value)}/>\n//         <button>Add!</button>\n//     </form>\n//   )\n// }","map":{"version":3,"sources":["/Users/stephenli/Desktop/to-do/src/App.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, {useState} from 'react';\n// import './App.css';\n\n// const App = () => {\n//   const [lists, setList] = useState([\n//       [\n//         {\n//           text: \"Learn ReactHooks\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"Go get boba\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"play basketball\",\n//           isCompleted: false\n//         }\n//       ]\n//   ])\n\n//   const updateList = (list, index) => {\n//     const newLists = [...lists];\n//     newLists[index] = list;\n//     setList(newLists);\n//     // console.log(list)\n//     // console.log(newLists)\n//   }\n  \n//   const addList = () => {\n//     const newLists = [...lists];\n//     const newList = [];\n//     newLists.push(newList);\n//     // newLists.unshift(newList);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n  \n//   const deleteList = (index) => {\n//     const newLists = [...lists];\n//     newLists.splice(index, 1);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n\n//   return(\n//     <div className=\"app\">\n//       {lists.map((list, index) => (\n//         <div key ={index}>\n//           <List \n//           list={list} \n//           key={index}\n//           index={index}\n//           updateList={updateList}\n//           deleteList={deleteList}\n//           />\n//         </div>\n//       ))}\n//       <button className=\"todo-list\" onClick={() => addList()}>Add a New List!</button>\n//     </div>\n//   )\n\n// }\n\n\n\n// const List = ({list, index, updateList, deleteList}) => {\n//   // want to use the same list from the props\n//   // giving it a new variable meant I was modifying a new one, which mean I was still modifitying the state, but the render was rendinging just the number of list, and not the exact values. \n  \n  \n//   // const [ , setTodos] = useState(\n    \n//   // )\n\n//   const addTodo = text => {\n//     const newTodos = [...list, { text }];\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n  \n//   const completeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos[todoIndex].isCompleted = !newTodos[todoIndex].isCompleted;\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n  \n//   const removeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos.splice(todoIndex, 1);\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   return (\n//       <div className=\"todo-list\" key={index}>\n//         <h3>\n//         <div>List {index + 1}</div>\n//         <button onClick={() => deleteList(index)}>X</button>\n//         </h3>\n//         {list.map((todo, index) => (\n//           <Todo \n//             key={index} \n//             todo={todo} \n//             completeTodo={completeTodo}\n//             removeTodo={removeTodo}\n//             index={index}/>\n//         ))}\n//         <TodoForm addTodo={addTodo}/>\n//       </div>\n//   )\n// }\n\n\n\n\n\n// const Todo = ({todo, index, completeTodo, removeTodo}) => {\n//   return(\n//     <div \n//       className=\"todo\"\n//       style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n//     >\n//       {todo.text}\n//       <div>\n//         <button onClick={() => completeTodo(index)}>Complete</button>\n//         <button onClick={() => removeTodo(index)}>X</button>\n//       </div>\n//     </div>\n//   )\n// }\n\n\n\n// const TodoForm = ({addTodo}) => {\n//   const [value, setValue] = useState('');\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if(!value) return;\n//     addTodo(value);\n//     setValue('');\n//   };\n\n//   return(\n//     <form onSubmit={handleSubmit}>\n//       <input \n//         type=\"text\"\n//         className=\"input\"\n//         value={value}\n//         placeholder=\"Add new to do...\"\n//         onChange={e => setValue(e.target.value)}/>\n//         <button>Add!</button>\n//     </form>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}