{"ast":null,"code":"import _slicedToArray from \"/Users/stephenli/Desktop/to-do/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stephenli/Desktop/to-do/src/App.js\";\n// import React, {useState} from 'react';\n// import './App.css';\n// const App = () => {\n//   const [lists, setList] = useState([\n//       [\n//         {\n//           text: \"Learn ReactHooks\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"Go get boba\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"play basketball\",\n//           isCompleted: false\n//         }\n//       ]\n//   ])\n//   const updateList = (list, index) => {\n//     const newLists = [...lists];\n//     newLists[index] = list;\n//     setList(newLists);\n//     // console.log(list)\n//     // console.log(newLists)\n//   }\n//   const addList = () => {\n//     const newLists = [...lists];\n//     const newList = [];\n//     newLists.push(newList);\n//     // newLists.unshift(newList);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n//   const deleteList = (index) => {\n//     const newLists = [...lists];\n//     newLists.splice(index, 1);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n//   return(\n//     <div className=\"app\">\n//       {lists.map((list, index) => (\n//         <div key ={index}>\n//           <List \n//           list={list} \n//           key={index}\n//           index={index}\n//           updateList={updateList}\n//           deleteList={deleteList}\n//           />\n//         </div>\n//       ))}\n//       <button className=\"todo-list\" onClick={() => addList()}>Add a New List!</button>\n//     </div>\n//   )\n// }\n// const List = ({list, index, updateList, deleteList}) => {\n//   // want to use the same list from the props\n//   // giving it a new variable meant I was modifying a new one, which mean I was still modifitying the state, but the render was rendinging just the number of list, and not the exact values. \n//   // const [ , setTodos] = useState(\n//   // )\n//   const addTodo = text => {\n//     const newTodos = [...list, { text }];\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   const completeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos[todoIndex].isCompleted = !newTodos[todoIndex].isCompleted;\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   const removeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos.splice(todoIndex, 1);\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   return (\n//       <div className=\"todo-list\" key={index}>\n//         <h3>\n//         <div>List {index + 1}</div>\n//         <button onClick={() => deleteList(index)}>X</button>\n//         </h3>\n//         {list.map((todo, index) => (\n//           <Todo \n//             key={index} \n//             todo={todo} \n//             completeTodo={completeTodo}\n//             removeTodo={removeTodo}\n//             index={index}/>\n//         ))}\n//         <TodoForm addTodo={addTodo}/>\n//       </div>\n//   )\n// }\n// const Todo = ({todo, index, completeTodo, removeTodo}) => {\n//   return(\n//     <div \n//       className=\"todo\"\n//       style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n//     >\n//       {todo.text}\n//       <div>\n//         <button onClick={() => completeTodo(index)}>Complete</button>\n//         <button onClick={() => removeTodo(index)}>X</button>\n//       </div>\n//     </div>\n//   )\n// }\n// const TodoForm = ({addTodo}) => {\n//   const [value, setValue] = useState('');\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if(!value) return;\n//     addTodo(value);\n//     setValue('');\n//   };\n//   return(\n//     <form onSubmit={handleSubmit}>\n//       <input \n//         type=\"text\"\n//         className=\"input\"\n//         value={value}\n//         placeholder=\"Add new to do...\"\n//         onChange={e => setValue(e.target.value)}/>\n//         <button>Add!</button>\n//     </form>\n//   )\n// }\nimport React, { useState, useEffect } from 'react'; // import { start } from 'pretty-error';\n// start time,\n// hit a button, counts down\n// set interval\n// 0 .... 20\n\nconst App = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        second = _useState2[0],\n        setSecond = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        minute = _useState4[0],\n        setMintue = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hour = _useState6[0],\n        setHour = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        started = _useState8[0],\n        setStarted = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        intervalId = _useState10[0],\n        setIntervalId = _useState10[1];\n\n  const startTime = () => {\n    // console.log(this)\n    if (started) {\n      console.log(intervalId);\n      clearInterval(intervalId);\n      setStarted(false);\n      setIntervalId(null);\n    } else {\n      console.log(intervalId);\n      setStarted(true);\n      setIntervalId(() => setInterval(() => {\n        setSecond(second => second + 1);\n      }, 100));\n    }\n  };\n\n  useEffect(() => {\n    // prevSeconds = prevState.second;\n    // prevMinute = prevState.minute;\n    // prevHour = prevState.hour;\n    if (second > 59) {\n      // if (prevSeconds > 59) {\n      setSecond(0);\n      setMintue(minute + 1);\n    } // prevState = 60 m 60 s\n    // state = 1 h 0 min, 0 sec\n\n\n    if (minute > 59) {\n      setMintue(0);\n      setHour(hour + 1);\n    }\n  }); // compinentDidUpdate \n  // prev props, prev states\n  // sec 59 -> 60 - >\n  // min 1\n  // if tine is greater than 60, time % 60  ex 61 1:01 \n  // minute = time/ 60\n\n  const formatedHour = hour < 10 ? \"0\" + hour : hour;\n  const formatedMinute = minute < 10 ? \"0\" + minute : minute;\n  const formatedSecond = second < 10 ? \"0\" + second : second; // if hour less then 10, 0 + hour, else hour\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"Hour:\", formatedHour), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"Minute:\", formatedMinute), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"Second:\", formatedSecond), React.createElement(\"button\", {\n    onClick: startTime.bind(this),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Start Time\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/stephenli/Desktop/to-do/src/App.js"],"names":["React","useState","useEffect","App","second","setSecond","minute","setMintue","hour","setHour","started","setStarted","intervalId","setIntervalId","startTime","console","log","clearInterval","setInterval","formatedHour","formatedMinute","formatedSecond","bind"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AAEA;AACA;AACA;AAGA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACYF,QAAQ,CAAC,CAAD,CADpB;AAAA;AAAA,QACTG,MADS;AAAA,QACDC,SADC;;AAAA,qBAEYJ,QAAQ,CAAC,CAAD,CAFpB;AAAA;AAAA,QAETK,MAFS;AAAA,QAEDC,SAFC;;AAAA,qBAGQN,QAAQ,CAAC,CAAD,CAHhB;AAAA;AAAA,QAGTO,IAHS;AAAA,QAGHC,OAHG;;AAAA,qBAIcR,QAAQ,CAAC,KAAD,CAJtB;AAAA;AAAA,QAITS,OAJS;AAAA,QAIAC,UAJA;;AAAA,qBAKoBV,QAAQ,CAAC,IAAD,CAL5B;AAAA;AAAA,QAKTW,UALS;AAAA,QAKGC,aALH;;AAOhB,QAAMC,SAAS,GAAG,MAAM;AACtB;AACA,QAAIJ,OAAJ,EAAa;AACXK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACAK,MAAAA,aAAa,CAACL,UAAD,CAAb;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KALD,MAKO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACAD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,aAAa,CAAC,MAAMK,WAAW,CAC7B,MAAM;AACJb,QAAAA,SAAS,CAACD,MAAM,IAAIA,MAAM,GAAG,CAApB,CAAT;AACD,OAH4B,EAI3B,GAJ2B,CAAlB,CAAb;AAKD;AACF,GAhBD;;AAkBAF,EAAAA,SAAS,CAAE,MAAM;AACf;AACA;AACA;AACA,QAAIE,MAAM,GAAG,EAAb,EAAiB;AACjB;AACEC,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAE,MAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACD,KARc,CASf;AACA;;;AACA,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACfC,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAE,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD;AACF,GAfQ,CAAT,CAzBgB,CA2ChB;AACA;AACA;AACA;AAGA;AACA;;AAEA,QAAMW,YAAY,GAAGX,IAAI,GAAG,EAAP,GAAY,MAAMA,IAAlB,GAAyBA,IAA9C;AACA,QAAMY,cAAc,GAAGd,MAAM,GAAG,EAAT,GAAc,MAAMA,MAApB,GAA6BA,MAApD;AACA,QAAMe,cAAc,GAAGjB,MAAM,GAAG,EAAT,GAAc,MAAMA,MAApB,GAA6BA,MAApD,CAtDgB,CAuDhB;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASe,YAAT,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWC,cAAX,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWC,cAAX,CAHF,EAIE;AAAQ,IAAA,OAAO,EAAEP,SAAS,CAACQ,IAAV,CAAe,IAAf,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CADF;AAQD,CAjED;;AAoEA,eAAenB,GAAf","sourcesContent":["// import React, {useState} from 'react';\n// import './App.css';\n\n// const App = () => {\n//   const [lists, setList] = useState([\n//       [\n//         {\n//           text: \"Learn ReactHooks\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"Go get boba\",\n//           isCompleted: false\n//         },\n//         {\n//           text: \"play basketball\",\n//           isCompleted: false\n//         }\n//       ]\n//   ])\n\n//   const updateList = (list, index) => {\n//     const newLists = [...lists];\n//     newLists[index] = list;\n//     setList(newLists);\n//     // console.log(list)\n//     // console.log(newLists)\n//   }\n  \n//   const addList = () => {\n//     const newLists = [...lists];\n//     const newList = [];\n//     newLists.push(newList);\n//     // newLists.unshift(newList);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n  \n//   const deleteList = (index) => {\n//     const newLists = [...lists];\n//     newLists.splice(index, 1);\n//     setList(newLists);\n//     console.log(newLists)\n//   }\n\n//   return(\n//     <div className=\"app\">\n//       {lists.map((list, index) => (\n//         <div key ={index}>\n//           <List \n//           list={list} \n//           key={index}\n//           index={index}\n//           updateList={updateList}\n//           deleteList={deleteList}\n//           />\n//         </div>\n//       ))}\n//       <button className=\"todo-list\" onClick={() => addList()}>Add a New List!</button>\n//     </div>\n//   )\n\n// }\n\n\n\n// const List = ({list, index, updateList, deleteList}) => {\n//   // want to use the same list from the props\n//   // giving it a new variable meant I was modifying a new one, which mean I was still modifitying the state, but the render was rendinging just the number of list, and not the exact values. \n  \n  \n//   // const [ , setTodos] = useState(\n    \n//   // )\n\n//   const addTodo = text => {\n//     const newTodos = [...list, { text }];\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n  \n//   const completeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos[todoIndex].isCompleted = !newTodos[todoIndex].isCompleted;\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n  \n//   const removeTodo = todoIndex => {\n//     const newTodos = [...list];\n//     newTodos.splice(todoIndex, 1);\n//     // setTodos(newTodos);\n//     updateList(newTodos, index)\n//   }\n//   return (\n//       <div className=\"todo-list\" key={index}>\n//         <h3>\n//         <div>List {index + 1}</div>\n//         <button onClick={() => deleteList(index)}>X</button>\n//         </h3>\n//         {list.map((todo, index) => (\n//           <Todo \n//             key={index} \n//             todo={todo} \n//             completeTodo={completeTodo}\n//             removeTodo={removeTodo}\n//             index={index}/>\n//         ))}\n//         <TodoForm addTodo={addTodo}/>\n//       </div>\n//   )\n// }\n\n\n\n\n\n// const Todo = ({todo, index, completeTodo, removeTodo}) => {\n//   return(\n//     <div \n//       className=\"todo\"\n//       style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n//     >\n//       {todo.text}\n//       <div>\n//         <button onClick={() => completeTodo(index)}>Complete</button>\n//         <button onClick={() => removeTodo(index)}>X</button>\n//       </div>\n//     </div>\n//   )\n// }\n\n\n\n// const TodoForm = ({addTodo}) => {\n//   const [value, setValue] = useState('');\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if(!value) return;\n//     addTodo(value);\n//     setValue('');\n//   };\n\n//   return(\n//     <form onSubmit={handleSubmit}>\n//       <input \n//         type=\"text\"\n//         className=\"input\"\n//         value={value}\n//         placeholder=\"Add new to do...\"\n//         onChange={e => setValue(e.target.value)}/>\n//         <button>Add!</button>\n//     </form>\n//   )\n// }\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\n// import { start } from 'pretty-error';\n\n// start time,\n// hit a button, counts down\n// set interval\n\n\n// 0 .... 20\n\nconst App = () => {\n  const [second, setSecond] = useState(0);\n  const [minute, setMintue] = useState(0);\n  const [hour, setHour] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n\n  const startTime = () => {\n    // console.log(this)\n    if (started) {\n      console.log(intervalId)\n      clearInterval(intervalId);\n      setStarted(false);\n      setIntervalId(null);\n    } else {\n      console.log(intervalId)\n      setStarted(true);\n      setIntervalId(() => setInterval(\n        () => {\n          setSecond(second => second + 1)\n        }\n        , 100))\n    }\n  }\n\n  useEffect( () => {\n    // prevSeconds = prevState.second;\n    // prevMinute = prevState.minute;\n    // prevHour = prevState.hour;\n    if (second > 59) {\n    // if (prevSeconds > 59) {\n      setSecond(0);\n      setMintue(minute + 1);\n    }\n    // prevState = 60 m 60 s\n    // state = 1 h 0 min, 0 sec\n    if (minute > 59) {\n      setMintue(0);\n      setHour(hour + 1);\n    }\n  },)\n  \n\n  // compinentDidUpdate \n  // prev props, prev states\n  // sec 59 -> 60 - >\n  // min 1\n\n\n  // if tine is greater than 60, time % 60  ex 61 1:01 \n  // minute = time/ 60\n\n  const formatedHour = hour < 10 ? \"0\" + hour : hour\n  const formatedMinute = minute < 10 ? \"0\" + minute : minute\n  const formatedSecond = second < 10 ? \"0\" + second : second\n  // if hour less then 10, 0 + hour, else hour\n\n  return (\n    <div>\n      <p>Hour:{formatedHour}</p>\n      <p>Minute:{formatedMinute}</p>\n      <p>Second:{formatedSecond}</p>\n      <button onClick={startTime.bind(this)}>Start Time</button>\n    </div>\n  )\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}