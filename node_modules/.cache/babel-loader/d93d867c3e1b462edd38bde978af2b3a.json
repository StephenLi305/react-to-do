{"ast":null,"code":"import _slicedToArray from \"/Users/stephenli/Desktop/to-do/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stephenli/Desktop/to-do/src/StopWatch.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst StopWatch = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        second = _useState2[0],\n        setSecond = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        minute = _useState4[0],\n        setMintue = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        hour = _useState6[0],\n        setHour = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        started = _useState8[0],\n        setStarted = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        intervalId = _useState10[0],\n        setIntervalId = _useState10[1];\n\n  const startTime = () => {\n    if (started) {\n      clearInterval(intervalId);\n      setStarted(false);\n      setIntervalId(null);\n    } else {\n      setStarted(true);\n      setIntervalId(() => setInterval( // need to pass in second as an argument to the setSecond function to update it \n      () => setSecond(second => second + 1), 1000));\n    }\n  };\n\n  useEffect(() => {\n    // Same as ComponentDid Update\n    console.log(second);\n\n    if (second > 59) {\n      setSecond(0);\n      setMintue(minute + 1);\n    }\n\n    if (minute > 59) {\n      setMintue(0);\n      setHour(hour + 1);\n    }\n  }, [second, minute, hour]);\n  const formatedHour = hour < 10 ? \"0\" + hour : hour;\n  const formatedMinute = minute < 10 ? \"0\" + minute : minute;\n  const formatedSecond = second < 10 ? \"0\" + second : second;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Hour:\", formatedHour), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Minute:\", formatedMinute), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Second:\", formatedSecond), React.createElement(\"button\", {\n    onClick: startTime,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, started ? \"Stop Time\" : \"Start Time\"));\n};\n\nexport default StopWatch;","map":{"version":3,"sources":["/Users/stephenli/Desktop/to-do/src/StopWatch.js"],"names":["React","useState","useEffect","StopWatch","second","setSecond","minute","setMintue","hour","setHour","started","setStarted","intervalId","setIntervalId","startTime","clearInterval","setInterval","console","log","formatedHour","formatedMinute","formatedSecond"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACQF,QAAQ,CAAC,CAAD,CADhB;AAAA;AAAA,QACbG,MADa;AAAA,QACLC,SADK;;AAAA,qBAEQJ,QAAQ,CAAC,CAAD,CAFhB;AAAA;AAAA,QAEbK,MAFa;AAAA,QAELC,SAFK;;AAAA,qBAGIN,QAAQ,CAAC,CAAD,CAHZ;AAAA;AAAA,QAGbO,IAHa;AAAA,QAGPC,OAHO;;AAAA,qBAIUR,QAAQ,CAAC,KAAD,CAJlB;AAAA;AAAA,QAIbS,OAJa;AAAA,QAIJC,UAJI;;AAAA,qBAKgBV,QAAQ,CAAC,IAAD,CALxB;AAAA;AAAA,QAKbW,UALa;AAAA,QAKDC,aALC;;AAOpB,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAIJ,OAAJ,EAAa;AACTK,MAAAA,aAAa,CAACH,UAAD,CAAb;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAJD,MAIO;AACHF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,aAAa,CAAC,MAAMG,WAAW,EAC3B;AACA,YAAMX,SAAS,CAACD,MAAM,IAAIA,MAAM,GAAG,CAApB,CAFY,EAGzB,IAHyB,CAAlB,CAAb;AAIH;AACJ,GAZD;;AAcAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ;;AACA,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACbC,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAE,MAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACH;;AAED,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACbC,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAE,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH;AACJ,GAZQ,EAYN,CAACJ,MAAD,EAASE,MAAT,EAAiBE,IAAjB,CAZM,CAAT;AAeA,QAAMW,YAAY,GAAGX,IAAI,GAAG,EAAP,GAAY,MAAMA,IAAlB,GAAyBA,IAA9C;AACA,QAAMY,cAAc,GAAGd,MAAM,GAAG,EAAT,GAAc,MAAMA,MAApB,GAA6BA,MAApD;AACA,QAAMe,cAAc,GAAGjB,MAAM,GAAG,EAAT,GAAc,MAAMA,MAApB,GAA6BA,MAApD;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASe,YAAT,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWC,cAAX,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWC,cAAX,CAHJ,EAII;AAAQ,IAAA,OAAO,EAAEP,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BJ,OAAO,GAAG,WAAH,GAAiB,YAArD,CAJJ,CADJ;AAQH,CAhDD;;AAmDA,eAAeP,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst StopWatch = () => {\n    const [second, setSecond] = useState(0);\n    const [minute, setMintue] = useState(0);\n    const [hour, setHour] = useState(0);\n    const [started, setStarted] = useState(false);\n    const [intervalId, setIntervalId] = useState(null);\n\n    const startTime = () => {\n        if (started) {\n            clearInterval(intervalId);\n            setStarted(false);\n            setIntervalId(null);\n        } else {\n            setStarted(true);\n            setIntervalId(() => setInterval(\n                // need to pass in second as an argument to the setSecond function to update it \n                () => setSecond(second => second + 1)\n                , 1000))\n        }\n    }\n\n    useEffect(() => {\n        // Same as ComponentDid Update\n        console.log(second);\n        if (second > 59) {\n            setSecond(0);\n            setMintue(minute + 1);\n        }\n\n        if (minute > 59) {\n            setMintue(0);\n            setHour(hour + 1);\n        }\n    }, [second, minute, hour])\n\n\n    const formatedHour = hour < 10 ? \"0\" + hour : hour\n    const formatedMinute = minute < 10 ? \"0\" + minute : minute\n    const formatedSecond = second < 10 ? \"0\" + second : second\n\n    return (\n        <div>\n            <p>Hour:{formatedHour}</p>\n            <p>Minute:{formatedMinute}</p>\n            <p>Second:{formatedSecond}</p>\n            <button onClick={startTime}>{started ? \"Stop Time\" : \"Start Time\"}</button>\n        </div>\n    )\n}\n\n\nexport default StopWatch;\n"]},"metadata":{},"sourceType":"module"}